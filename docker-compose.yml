services:
  iris:
    build:
      context: ./IRIS
      dockerfile: Dockerfile
    init: true
    container_name: ${CONTAINER_NAME}
    hostname: ${CONTAINER_NAME}
    volumes:
    - type: bind
      source: ./IRIS
      target: /IRIS
    - type: bind
      source: ./data
      target: /data
    - type: bind
      source: ./volumes
      target: /volumes
    # command: -a /IRIS/configure.sh
    environment:
      - ISC_DATA_DIRECTORY=/volumes/IRIS
      # - ISC_CPF_MERGE_FILE=/IRIS/mirrorPrimary.conf
    ports:
      - 29720:1972
      - 28000:52773
      - 10001:10001
      - 24040:8080
      # - 4041:8081
      - 28888:8888
  # notebook:
  #   container_name: ${CONTAINER_NAME}-notebook
  #   # build: 
  #   #   context: notebook
  #   image: jupyter-notebook
  #   ports:
  #     - "28001:8888"
  #   volumes:
  #     - ./notebook/Notebooks:/Notebooks
  #   command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password='' --notebook-dir=/Notebooks"
  #   environment:
  #     - IRISINSTALLDIR='/usr/irissys'
  angular:
    init: true
    container_name: ${CONTAINER_NAME}-workflow-ui
    build:
      context: ./workflow-ui
      dockerfile: Dockerfile
    ports:
      - 28002:4200
    depends_on:
      - iris
  ftp_server:
    image: delfer/alpine-ftp-server:latest
    container_name: ${CONTAINER_NAME}-ftp
    hostname: ${CONTAINER_NAME}-ftp
    ports:
      - "28021:21"
      # - "21000-21010:21000-21010"
    volumes: 
      - "./data:/home/app/"
      # - "./data/passwd:/etc/pure-ftpd/passwd"
# uncomment for ssl/tls, see https://github.com/stilliard/docker-pure-ftpd#tls
#      - "/folder_on_disk/ssl:/etc/ssl/private/"
# or ssl/tls with Let's Encrypt (cert and key as two files)
#      - "/etc/letsencrypt/live/<your_server>/cert.pem:/etc/ssl/private/pure-ftpd-cert.pem"
#      - "/etc/letsencrypt/live/<your_server>/privkey.pem:/etc/ssl/private/pure-ftpd-key.pem"
    environment:
      PUBLICHOST: "localhost"
      USERS: "app|youneverknow|/home/app|10000"
# also for ssl/tls:
#      ADDED_FLAGS: "--tls=2"
    restart: always
  postgres:
    container_name: ${CONTAINER_NAME}-postgres
    image: postgres
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./postgreSQL:/docker-entrypoint-initdb.d/
      - ./volumes/postgreSQL:/var/lib/postgresql/data
    ports:
      - 25432:5432
    restart: unless-stopped
    healthcheck:
        test: ["CMD", "pg_isready", "-U", "postgres"]
        interval: 30s
        timeout: 30s
        retries: 3
  fhirhl7v2ui:
    build: ./fhirhl7ui
    depends_on:
      - iris
    ports:
      - "4201:4200"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    command: "npm run proxy"
    volumes:
    - type: bind
      source: ./fhirhl7ui/app/src/app
      target: /home/node/app/src/app
  # zookeeper:
  #   image: 'confluentinc/cp-zookeeper:5.3.1-1'
  #   # image: arm64v8/zookeeper:latest
  #   # image: confluentinc/cp-zookeeper
  #   hostname: 'zookeeper'
  #   ports:
  #     - 2181:2181
  #   environment:
  #     - 'ZOOKEEPER_CLIENT_PORT=2181'
  #     - 'ZOOKEEPER_TICK_TIME=2000'
  #   restart: 'on-failure'

#   kafka:
#     image: 'confluentinc/cp-kafka:5.3.1-1'
#     # image: wurstmeister/kafka:latest
#     # image: confluentinc/cp-kafka
#     hostname: 'kafka'
#     depends_on:
#       - 'zookeeper'
#     ports:
#       - 9092:9092
# #      - 9999:9999
#     environment:
#       - 'KAFKA_BROKER_ID=1'
#       - 'KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181'
#       - 'KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092'
#       - 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
#       - 'KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT'
#       - 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1'
#       - 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1'
#       - 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1'
#       - 'KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094'
# #     - 'KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.net.preferIPv4Stack=true -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Djava.rmi.server.hostname=ip here'
#     restart: 'on-failure'

  # kafka-manager:
  #   image: 'eduard93/kafka-manager-demo:latest'
  #   # image: hlebalbau/kafka-manager:latest
  #   # image: gdp123gd/kafka-manager:v2.0.0.2
  #   hostname: 'kafka-manager'
  #   depends_on:
  #     - 'kafka'
  #   environment:
  #     - 'KAFKA_SERVERS_URL=kafka:29092'
  #   ports:
  #     - 8082:8082
  #   restart: 'on-failure'